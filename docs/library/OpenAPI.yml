openapi: "3.0.0"
info:
  version: 1.0.0
  title: Pokemon
servers:
  - url: http://localhost:8080
paths:
  /:
    get:
      summary: Health Check
      operationId: healthCheck
      description: |
        This is an endpoint use for `health check` if the service is up.
      tags:
        - health
      responses:
        '200':
          description: Return if the health check is success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /login:
    post:
      summary: Authenticate
      description: |
          This endpoint helps for authentication users, it uses a `json` body 
          with the arguments `username` and `password`, it returns a `token` 
          that is going to be used to identify the user.
      operationId: login
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: Return authentication token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /register:
    post:
      summary: Register
      description: |
          This endpoint enables users to register.
      operationId: register
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Return the user data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /search:
    get:
      summary: Search Book
      operationId: searchBook
      description: |
        This endpoint search book by `isbn`.
      tags:
        - book
      parameters:
        - in: query
          name: isbn
          schema:
            type: string
          description: Search book from isbn
        - in: query
          name: title
          schema:
            type: string
          description: Search book from title
      responses:
        '200':
          description: Return the book that was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /library:
    get:
      summary: Get the book that exist in the library
      operationId: getBooksFromLibrary
      description: |
        Return all the `books` that exist in the user library.
      tags:
        - library
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Return the books that was found in the library
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BooksInLibrary"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Upsert book to library
      operationId: upsertBook
      description: |
        Upsert a book in the library by its id (the `isbn`), it also add 
        `tags` to the book.
      tags:
        - library
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertBookRequest'
      responses:
        '200':
          description: Return the book that was added to the library.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookInLibrary"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /library/{id}:
    delete:
      summary: Delete book to library
      operationId: deleteBookFromLibrary
      description: |
        This endpoint remove the books from the library by its id.
      tags:
        - library
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the book to delete
          schema:
            type: string
      responses:
        '200':
          description: Return the book that was deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookInLibrary"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections:
    get:
      summary: Get collections
      operationId: getCollections
      description: |
        This endpoints return a list of all the `collections` from the user.
      tags:
        - collection
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Return a list of the `collections`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collections"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Add Collection
      operationId: addCollection
      description: |
        Add a `collection` to the user
      tags:
        - collection
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Return the collection that was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections/{id}:
    post:
      summary: Add Book to Collection
      operationId: addBookToCollection
      description: |
        This endpoint add a book to a `collection`.
      tags:
        - collection
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBookToCollectionRequest'
      responses:
        '200':
          description: Expected response to be the `book` that was removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookInLibrary"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete Collection
      operationId: deleteCollection
      description: |
        Remove a `collection` by its `id`.
      tags:
        - collection
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the `collection` to delete
          schema:
            type: string
      responses:
        '200':
          description: Expected response to be the `collection` that was removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Collection"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /collections/{id}/{bookId}:
    delete:
      summary: Remove book from Collection
      operationId: deleteBookFromCollection
      description: |
        Remove a `book` from a `collection` by its `id`.
      tags:
        - collection
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the `collection` that the `book` belongs to.
          schema:
            type: string
        - name: bookId
          in: path
          required: true
          description: The id of the `book` to delete.
          schema:
            type: string
      responses:
        '200':
          description: Expected response to be the `book` that was removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookInLibrary"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    Health:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
    RegisterRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    RegisterResponse:
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: string
        username:
          type: string
    UpsertBookRequest:
        type: object
        required:
          - id
          - tags
        properties:
          id:
            type: string
          tags:
            type: array
            items:
              type: string
    AddBookToCollectionRequest:
        type: object
        required:
          - id
        properties:
          id:
            type: string
    Credentials:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    Collections:
      type: array
      items:
        $ref: '#/components/schemas/Collection'
    Collection:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Books:
      type: array
      items:
        $ref: '#/components/schemas/Book'
    Book:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        author:
          type: string
        publisher:
          type: string
        pages:
          type: integer
        created:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time
    BooksInLibrary:
      type: array
      items:
        $ref: '#/components/schemas/BookInLibrary'
    BookInLibrary:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        author:
          type: string
        publisher:
          type: string
        pages:
          type: integer
        tags:
            type: array
            items:
              type: string
        created:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time
    Token:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string